document.addEventListener('DOMContentLoaded', () => {
    const tablesContainer = document.getElementById('tables-container');
    if (!tablesContainer) {
        console.error('El contenedor "tables-container" no se encuentra en el HTML.');
        return;
    }

    if (!data || !Array.isArray(data)) {
        console.error('Datos no disponibles o incorrectos.');
        return;
    }

    // Mapeo para los n√∫meros ordinales
    const ordinalMap = {
        'primer': 1, 'segundo': 2, 'tercer': 3, 'cuarto': 4, 'quinto': 5, 'sexto': 6, 's√©ptimo': 7, 'septimo': 7, 'octavo': 8, 'noveno': 9, 'd√©cimo': 10,
        'und√©cimo': 11, 'duod√©cimo': 12, 'd√©cimo tercer': 13, 'd√©cimo cuarto': 14, 'd√©cimo quinto': 15, 'd√©cimo sexto': 16, 
        'd√©cimo s√©ptimo': 17, 'd√©cimo octavo': 18, 'd√©cimo noveno': 19, 'vig√©simo': 20, 'vig√©simo primer': 21, 'vig√©simo segundo': 22,
        'vig√©simo tercer': 23, 'vig√©simo cuarto': 24, 'vig√©simo quinto': 25, 'vig√©simo sexto': 26, 'vig√©simo s√©ptimo': 27, 
        'vig√©simo octavo': 28, 'vig√©simo noveno': 29, 'trig√©simo': 30, 'trig√©simo primer': 31, 'trig√©simo segundo': 32, 
        'trig√©simo tercer': 33, 'trig√©simo cuarto': 34, 'trig√©simo quinto': 35, 'trig√©simo sexto': 36, 'trig√©simo s√©ptimo': 37, 
        'trig√©simo octavo': 38, 'trig√©simo noveno': 39, 'cuadrag√©simo': 40, 'cuadrag√©simo primer': 41, 'cuadrag√©simo segundo': 42,
        'cuadrag√©simo tercer': 43, 'cuadrag√©simo cuarto': 44, 'cuadrag√©simo quinto': 45, 'cuadrag√©simo sexto': 46, 
        'cuadrag√©simo s√©ptimo': 47, 'cuadrag√©simo octavo': 48, 'cuadrag√©simo noveno': 49, 'quincuag√©simo': 50, 'quincuag√©simo primer': 51, 
        'quincuag√©simo segundo': 52, 'quincuag√©simo tercer': 53, 'quincuag√©simo cuarto': 54, 'quincuag√©simo quinto': 55, 
        'quincuag√©simo sexto': 56, 'quincuag√©simo s√©ptimo': 57, 'quincuag√©simo octavo': 58, 'quincuag√©simo noveno': 59, 
        'sexag√©simo': 60, 'sexag√©simo primer': 61, 'sexag√©simo segundo': 62, 'sexag√©simo tercer': 63, 'sexag√©simo cuarto': 64, 
        'sexag√©simo quinto': 65, 'sexag√©simo sexto': 66, 'sexag√©simo s√©ptimo': 67, 'sexag√©simo octavo': 68, 'sexag√©simo noveno': 69, 
        'septuag√©simo': 70, 'septuag√©simo primer': 71, 'septuag√©simo segundo': 72, 'septuag√©simo tercer': 73, 'septuag√©simo cuarto': 74, 
        'septuag√©simo quinto': 75, 'septuag√©simo sexto': 76, 'septuag√©simo s√©ptimo': 77, 'septuag√©simo octavo': 78, 
        'septuag√©simo noveno': 79, 'octog√©simo': 80, 'octog√©simo primer': 81, 'octog√©simo segundo': 82, 'octog√©simo tercer': 83, 
        'octog√©simo cuarto': 84, 'octog√©simo quinto': 85, 'octog√©simo sexto': 86, 'octog√©simo s√©ptimo': 87, 'octog√©simo octavo': 88, 
        'octog√©simo noveno': 89, 'nonag√©simo': 90
    };

    // Funci√≥n para convertir n√∫meros romanos a ar√°bigos
    function romanToArabic(roman) {
        const romanNumerals = {
            'I': 1, 'IV': 4, 'V': 5, 'IX': 9, 'X': 10,
            'XL': 40, 'L': 50, 'XC': 90, 'C': 100,
            'CD': 400, 'D': 500, 'CM': 900, 'M': 1000
        };

        roman = roman.toUpperCase(); // Convertir a may√∫sculas
        let arabic = 0;
        let i = 0;

        while (i < roman.length) {
            const twoChar = roman.slice(i, i + 2);
            if (romanNumerals[twoChar]) {
                arabic += romanNumerals[twoChar];
                i += 2;
            } else {
                arabic += romanNumerals[roman[i]];
                i += 1;
            }
        }

        return arabic;
    }

    // Funci√≥n para extraer n√∫meros romanos de una cadena
    function extractRomanNumber(title) {
        const romanPattern = /(?:d√≠a|dia)\s*([IVXLCDM]+)/i;
        const match = title.match(romanPattern);
        if (match && match[1]) {
            return match[1].toUpperCase(); // Devuelve el n√∫mero romano en may√∫sculas
        }
        return null;
    }

    // Funci√≥n para extraer el n√∫mero del d√≠a desde el t√≠tulo
    function extractDayNumber(title) {
        let normalizedTitle = title.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

        // Buscar n√∫meros romanos en el t√≠tulo
        const romanNumber = extractRomanNumber(normalizedTitle);
        if (romanNumber) {
            return romanToArabic(romanNumber);
        }

        // Buscar el n√∫mero en el mapeo de ordinales
        for (let key in ordinalMap) {
            const regex = new RegExp(`\\b${key}\\b`, 'g');
            if (regex.test(normalizedTitle)) {
                return ordinalMap[key];
            }
        }

        // Buscar n√∫meros cardinales en el t√≠tulo (e.g., D√≠a 1, Dia 2, etc.)
        const cardinalMatch = normalizedTitle.match(/(?:d√≠a|dia)\s*(\d+)/i);
        if (cardinalMatch && cardinalMatch[1]) {
            return parseInt(cardinalMatch[1], 10);
        }

        return null;
    }

    // Funci√≥n para extraer el n√∫mero base del t√≠tulo
    function extractBaseNumber(title) {
        const normalizedTitle = title.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");
        const baseMatch = normalizedTitle.match(/(?:d√≠a|dia)\s*(\d+)/i);
        if (baseMatch && baseMatch[1]) {
            return parseInt(baseMatch[1], 10);
        }
        return null;
    }

    // Agrupa los datos por usuario y versi√≥n
    const groupedData = data.reduce((acc, item) => {
        if (!item || !item.author || !item.title || !item.date) return acc;

        const day = extractDayNumber(item.title);

        const versionPattern = /v\s*\.?\s*(\d+)/i;
        let version = 'Versi√≥n 1'; // Por defecto
        const versionMatch = item.title.match(versionPattern);
        if (versionMatch) {
            version = `Versi√≥n ${versionMatch[1]}`;
        }

        if (!acc[version]) {
            acc[version] = {};
        }
        if (!acc[version][item.author]) {
            acc[version][item.author] = {};
        }

        if (day) {
            acc[version][item.author][day] = 'üíö'; // Marca el d√≠a como completado
        }

        return acc;
    }, {});

    // Ordena las versiones de menor a mayor
    const sortedVersions = Object.keys(groupedData).sort((a, b) => {
        const versionOrder = {
            'Versi√≥n 1': 1,
            'Versi√≥n 2': 2,
            'Versi√≥n 3': 3,
            'Versi√≥n 4': 4,
            'Versi√≥n 5': 5,
            'Versi√≥n 6': 6,
            'Versi√≥n 7': 7,
            'Versi√≥n 8': 8,
            'Versi√≥n 9': 9,
            'Versi√≥n 10': 10,
            'Versi√≥n 11': 11
        };
        return versionOrder[a] - versionOrder[b];
    });

    // Crea las tablas y a√±√°delas al contenedor
    sortedVersions.forEach(version => {
        const section = document.createElement('section');
        const heading = document.createElement('h2');
        heading.textContent = `Tabla de Progreso - ${version}`;
        section.appendChild(heading);

        const table = document.createElement('table');
        const thead = document.createElement('thead');
        const tbody = document.createElement('tbody');

        // Crea la cabecera de la tabla
        const headerRow = document.createElement('tr');
        headerRow.innerHTML = '<th>Usuario</th>' + Array.from({ length: 90 }, (_, i) => `<th>${i + 1}</th>`).join('');
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Crea el cuerpo de la tabla
        const users = Object.keys(groupedData[version]);
        users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `<td title="@${user}">@${user}</td>` +
                Array.from({ length: 90 }, (_, i) => {
                    const dayNumber = i + 1;
                    const completed = groupedData[version][user][dayNumber] || '‚ùå';
                    return `<td title="@${user}, d√≠a ${dayNumber} ${version}">${completed}</td>`;
                }).join('');
            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        section.appendChild(table);
        tablesContainer.appendChild(section);
    });
});
